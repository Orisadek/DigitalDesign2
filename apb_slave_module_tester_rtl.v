//
// Test Bench Module Ori_Alon_Lab_1_lib.apb_slave_module_tester.apb_slave_module_tester
//
// Created:
//          by - vain.UNKNOWN (TOMER)
//          at - 12:07:10 01/30/2024
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
//
`resetall
`timescale 1ns/10ps
module apb_slave_module_tester (clk_i,
                                rst_ni,
                                psel_i,
                                penable_i,
                                pwrite_i,
                                pstrb_i,
                                pwdata_i,
                                paddr_i,
                                pready_o,
                                pslverr_o,
                                prdata_o,
                                busy_o
                               );

// Local declarations

parameter DATA_WIDTH = 32;
parameter BUS_WIDTH = 64;
parameter ADDR_WIDTH = 32;
localparam MAX_DIM = (BUS_WIDTH / DATA_WIDTH);


output clk_i;
output rst_ni;
output psel_i;
output penable_i;
output pwrite_i;
output pstrb_i;
output pwdata_i;
output paddr_i;
input  pready_o;
input  pslverr_o;
input  prdata_o;
input  busy_o;


reg clk_i;
reg rst_ni;
reg psel_i;
reg penable_i;
reg pwrite_i;
wire pready_o;
wire pslverr_o;
wire busy_o;
reg [BUS_WIDTH/8-1:0] pstrb_i; //for every byte there is a Pstrb[n]
reg [BUS_WIDTH-1:0] pwdata_i;
reg [ADDR_WIDTH-1:0] paddr_i;
wire [BUS_WIDTH-1:0] prdata_o;

initial begin: setup_clk
  clk_i = 1'b0;
  forever #1 clk_i = ~clk_i;
end

initial begin: setup_rst
  rst_ni = 1'b0;
  #10 rst_ni = 1'b1;
end

task do_write;
input [ADDR_WIDTH-1:0] addr_write;
input [BUS_WIDTH-1:0] data_write;
	begin
		psel_i    = 1'b1;
		pwrite_i  = 1'b1;
		pstrb_i   = 1;
		#1
		paddr_i   = addr_write;
		pwdata_i  = data_write;
		penable_i = 1;
		#2
		psel_i = 0;
		pwrite_i  = 1'b0;
		penable_i = 0;
	end
endtask

task do_read;
input [ADDR_WIDTH-1:0] addr_read;
	begin
		psel_i = 1'b1;
		pwrite_i  = 1'b0;
		pstrb_i = 0;
		#1
		paddr_i   = addr_read;
		penable_i = 1;
		#2
		psel_i = 0;
		penable_i = 0;
	end
endtask


initial begin
	wait (rst_ni == 1);
	do_write(4,12);
	wait (psel_i == 0);
	#2
	do_read(4);
end





endmodule // apb_slave_module_tester


