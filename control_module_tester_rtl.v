//
// Test Bench Module Ori_Alon_Lab_1_lib.control_module_tester.control_module_tester
//
// Created:
//          by - orisad.UNKNOWN (TOMER)
//          at - 23:03:12 02/ 5/2024
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
//
`resetall
`timescale 1ns/10ps
module control_module_tester (clk_i,
                              rst_ni,
                              start_bit_i,
                              write_enable_i,
                              data_i,
                              write_target_o,
                              read_target_o,
                              N_o,
                              K_o,
                              M_o,
                              mode_bit_o,
                              start_bit_o,
                              data_o
                             );

localparam CONTROL_WIDTH = 16; // width of the control

output clk_i;
output rst_ni;
output start_bit_i;
output write_enable_i;
output data_i;
input  write_target_o;
input  read_target_o;
input  N_o;
input  K_o;
input  M_o;
input  mode_bit_o;
input  start_bit_o;
input  data_o;

reg clk_i; // clk
reg rst_ni;
reg start_bit_i;
reg write_enable_i;
reg [CONTROL_WIDTH-1:0] data_i; // data in to all control
wire [CONTROL_WIDTH-1:0] data_o; // output data (control)
wire mode_bit_o;
wire start_bit_o;
wire [1:0] write_target_o; // target to read from SP (only if mode bit =1)
wire [1:0] read_target_o; // target to write in SP
wire [1:0] N_o,K_o,M_o;  // N,K,M Dimension

reg [CONTROL_WIDTH-1:0] data_test;

initial begin: setup_clk
  clk_i = 1'b0;
  forever #1 clk_i = ~clk_i;
end

initial begin: setup_rst
  rst_ni = 1'b0;
  #10 rst_ni = 1'b1;
end

task do_write;
  input [CONTROL_WIDTH-1:0] data_write;
    begin
      write_enable_i = 1'b1;
      data_i = data_write;
      #2
      write_enable_i = 1'b0;
    end
endtask
    
initial begin: setup_data_test
   data_test = 0;
end

task do_read;
    begin
	     write_enable_i = 1'b0;  
    end
endtask    
    
    
initial begin:tasks_call
	wait (rst_ni == 1'b1);
  do_write(data_test);
  data_test[0] = 1; // read start bit
  data_test[1] = 1;  // read mode bit
  data_test[3:2] =1; // target to write in SP 
  data_test[5:4] =1; // target to read from SP (only if mode bit = 1) 
  data_test[9:8] = 2;   // N -  1st dimension of matrix A and the 1st dimension of out matrix C
  data_test[11:10]=2; // K -  2nd dimension of matrix A and the 1st dimension of matrix B
  data_test[13:12]=2; // M -  2nd dimension of matrix B and the 2nd dimension of out matrix C
  #1
  do_write(data_test);
  
end   
    
endmodule // control_module_tester


